scriptencoding utf-8
" run plugged
call plug#begin('~/.vim/plugged')

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins that add new windows
"""""""""""""""""""""""""""""""""""""""""""""""""""""
"fancypants status line
Plug 'itchyny/lightline.vim'
let g:lightline = {
    \ 'colorscheme': 'OldHope',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'fugitive', 'filename', 'readonly' ] ],
    \   'right': [ [ 'lineinfo' ],
    \              [ 'percent' ],
    \              [ 'fileformat', 'fileencoding', 'filetype' ] ]
    \ },
    \ 'component': {
    \   'readonly': "%{&readonly?'тнд':''}",
    \ },
    \ 'component_function': {
    \   'fugitive': 'LightlineFugitive',
    \   'filename': 'LightlineFilename',
    \ },
    \ }

function! IsQFLLFocused()
    silent! exec 'redir @a | ls | redir END'
    if match(@a,'%a-  "\[Location List\]"') >= 0
        return 1
    elseif match(@a,'%a-  "\[Quickfix List\]"') >= 0
        return 2
    else
        return 0
    endif
endfunction

function! LightlineFugitive()
    if &filetype !~? 'vimfiler' && exists('*fugitive#head')
        return fugitive#head()
    endif
    return ''
endfunction

function! LightlineFilename()
    let l:is_special_focused = IsQFLLFocused()
    if l:is_special_focused == 1
        return '[Local/Location List]'
    elseif l:is_special_focused == 2
        return '[Global/QuickFix]'
    endif

    let l:short_filename = expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
    let l:med_filename = expand('%:t') !=# '' ? fnamemodify(expand('%:p'), ':~:.') : '[No Name]'
    let l:full_filename = expand('%:t') !=# '' ? fnamemodify(expand('%:p'), ':~:.') : '[No Name]'

    let l:max_len = 120
    let l:full_len = len(l:full_filename)
    let l:med_len = len(l:med_filename)

    let l:use_short = l:full_len > l:max_len && l:med_len > l:max_len
    let l:use_med = l:full_len > l:max_len && l:med_len <= l:max_len

    return l:use_short ? l:short_filename : l:use_med ? l:med_filename : l:full_filename
endfunction

"visual undo tree. nice for when you need to go back to a branch
Plug 'sjl/gundo.vim'

"provides hg/git change status in the left gutter
Plug 'mhinz/vim-signify'

"vim front end for ack, with support for ag backend
Plug 'mileszs/ack.vim'
if executable('rg')
    let g:ackprg = 'rg --vimgrep --no-heading'
endif

"better buffer management
Plug 'jlanzarotta/bufexplorer'

"display marks
Plug 'kshenoy/vim-signature'

"Alternative to netrw, which is slow and buggy
Plug 'jeetsukumaran/vim-filebeagle'
let g:filebeagle_show_hidden=1

"Git wrapper for doing git things on files in vim
Plug 'tpope/vim-fugitive'
command! Greview :Git! diff --staged

"Blink the hlsearch item we just jumped to
Plug 'ivyl/vim-bling'
" This must be set to no, otherwise this breaks cabbrev working on <cr>
let g:bling_no_expr = 1

"Show the diff when editing a git commit.
Plug 'rhysd/committia.vim'

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" linting
"""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>cd  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>ce  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>cc  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>co  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>cs  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>cj  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>ck  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>cp  :<C-u>CocListResume<CR>

"Adhere to linux coding style guidelines
Plug 'vivien/vim-linux-coding-style', {'for': 'c'}
let g:linuxsty_patterns = []

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim Plugins that add keyboard commands

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Wikidown provides a personal wiki implemented with markdown files.
Plug 'adamatom/wikidown'
let g:wikidown_debug = 0
let g:wikidown_default_maps = 1
let g:wikidown_wikis = {
  \ 'notes': {
  \     'path': '~/projects/notes_wiki',
  \     'path_html': '~/projects/notes_wiki/html',
  \     'index_file': 'index.md',
  \     'log_subdir': 'log',
  \     'ignore_html': '',
  \     'author': 'Adam',
  \     'css': ''},
  \ 'home': {
  \     'path': '~/projects/home_wiki',
  \     'path_html': '~/projects/home_wiki/html',
  \     'index_file': 'index.md',
  \     'log_subdir': 'log',
  \     'ignore_html': '',
  \     'author': 'Adam',
  \     'css': ''},
  \ 'adamatom': {
  \     'path': '~/projects/wiki',
  \     'path_html': '~/projects/wiki/html',
  \     'index_file': 'index.md',
  \     'log_subdir': 'log',
  \     'ignore_html': '',
  \     'author': 'Adam Labbe',
  \     'css': ''},
  \ 'gen6': {
  \     'path': '~/projects/idexx/acadia/gen6-presentation/',
  \     'path_html': '~/projects/idexx/acadia/gen6-presentation/html',
  \     'index_file': 'index.md',
  \     'log_subdir': 'log',
  \     'ignore_html': '',
  \     'author': 'Adam Labbe',
  \     'css': ''}
  \ }

"replace {motion} with a register. Faster than typing '"_c[motion]^r"'
Plug 'vim-scripts/ReplaceWithRegister'

"repeated v's expand cut the visually selected region
Plug 'terryma/vim-expand-region'

"nice motion plugin, relieves 'w' spam
Plug 'justinmk/vim-sneak'
let g:sneak#label = 1
let g:sneak#s_next = 1
map f <Plug>Sneak_f
map F <Plug>Sneak_F
map t <Plug>Sneak_t
map T <Plug>Sneak_T

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Extra language support, such as syntax highlighting, repl interaction
"""""""""""""""""""""""""""""""""""""""""""""""""""""

Plug 'wlangstroth/vim-racket', {'for': ['scheme', 'racket']}
Plug 'tpope/vim-fireplace', {'for' : 'clojure' }

"automatically display markdown view when editing md files
Plug 'suan/vim-instant-markdown', {'for': 'markdown'}
let g:instant_markdown_autostart = 0

"Sort python includes with isort
Plug 'fisadev/vim-isort', {'for': 'python'}
let g:vim_isort_python_version = 'python3'

"graphviz support
Plug 'wannesm/wmgraphviz.vim', {'for': 'dot'}

"Linux kernel/Buildroot Kconfig syntax
Plug 'chrisbra/vim-kconfig', {'for': 'kconfig'}

"Syntax, indent, ftplugin for a bunch of languages
Plug 'sheerun/vim-polyglot'

"Semantic highlighting
Plug 'jaxbot/semantic-highlight.vim'

"display function signature after autocompletion item is selected
Plug 'Shougo/echodoc.vim'
let g:echodoc#enable_at_startup=1

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" color schemes
"""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'NLKNguyen/papercolor-theme'
Plug 'chriskempson/base16-vim'
Plug 'connorholyday/vim-snazzy'
Plug 'dracula/vim'
Plug 'jacoborus/tender.vim'
Plug 'joshdick/onedark.vim'
Plug 'liuchengxu/space-vim-theme'
Plug 'marcopaganini/termschool-vim-theme'
Plug 'mhartington/oceanic-next'
Plug 'mkarmona/materialbox'
Plug 'morhetz/gruvbox'
Plug 'nightsense/carbonized'
Plug 'rakr/vim-one'
Plug 'ayu-theme/ayu-vim'
Plug 'arzg/vim-corvine'


call plug#end()
