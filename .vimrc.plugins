scriptencoding utf-8
" run plugged
call plug#begin('~/.vim/plugged')

let g:ale_emit_conflict_warnings = 0
"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins that add new windows
"""""""""""""""""""""""""""""""""""""""""""""""""""""
"fancypants status line
Plug 'itchyny/lightline.vim'
let g:lightline = {
    \ 'colorscheme': 'OldHope',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'fugitive', 'filename', 'readonly' ] ],
    \   'right': [ [ 'lineinfo', 'ale' ],
    \              [ 'percent' ],
    \              [ 'fileformat', 'fileencoding', 'filetype' ] ]
    \ },
    \ 'component': {
    \   'readonly': "%{&readonly?'тнд':''}",
    \ },
    \ 'component_function': {
    \   'ale': 'LightLineAle',
    \   'fugitive': 'LightlineFugitive',
    \   'filename': 'LightlineFilename',
    \ },
    \ }

function! IsQFLLFocused()
    silent! exec 'redir @a | ls | redir END'
    if match(@a,'%a-  "\[Location List\]"') >= 0
        return 1
    elseif match(@a,'%a-  "\[Quickfix List\]"') >= 0
        return 2
    else
        return 0
    endif
endfunction

function! LightlineFugitive()
    if &filetype !~? 'vimfiler' && exists('*fugitive#head')
        return fugitive#head()
    endif
    return ''
endfunction

function! LightLineAle() abort
    let l:counts = ale#statusline#Count(bufnr(''))

    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors

    return l:counts.total == 0 ? 'OK' : printf(
    \   '%dW %dE',
    \   all_non_errors,
    \   all_errors
    \)
endfunction
function! LightlineFilename()
    let l:is_special_focused = IsQFLLFocused()
    if l:is_special_focused == 1
        return '[Local/Location List]'
    elseif l:is_special_focused == 2
        return '[Global/QuickFix]'
    endif

    let l:short_filename = expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
    let l:med_filename = expand('%:t') !=# '' ? fnamemodify(expand('%:p'), ':~:.') : '[No Name]'
    let l:full_filename = expand('%:t') !=# '' ? fnamemodify(expand('%:p'), ':~:.') : '[No Name]'

    let l:max_len = 120
    let l:full_len = len(l:full_filename)
    let l:med_len = len(l:med_filename)

    let l:use_short = l:full_len > l:max_len && l:med_len > l:max_len
    let l:use_med = l:full_len > l:max_len && l:med_len <= l:max_len

    return l:use_short ? l:short_filename : l:use_med ? l:med_filename : l:full_filename
endfunction

"spacemacs like window to show next key
Plug 'liuchengxu/vim-which-key', { 'on': ['WhichKey', 'WhichKey!', 'WhichKeyVisual'] }

"adds a window that shows all of the functions in the current file
Plug 'majutsushi/tagbar'

"visual undo tree. nice for when you need to go back to a branch
Plug 'sjl/gundo.vim'

"provides hg/git change status in the left gutter
Plug 'mhinz/vim-signify'

"vim front end for ack, with support for ag backend
Plug 'mileszs/ack.vim'
if executable('rg')
    let g:ackprg = 'rg --vimgrep --no-heading'
endif

"better buffer management
Plug 'jlanzarotta/bufexplorer'

"display marks
Plug 'kshenoy/vim-signature'

"Alternative to netrw, which is slow and buggy
Plug 'jeetsukumaran/vim-filebeagle'
let g:filebeagle_show_hidden=1

"Git wrapper for doing git things on files in vim
Plug 'tpope/vim-fugitive'
command! Greview :Git! diff --staged

"Blink the hlsearch item we just jumped to
Plug 'ivyl/vim-bling'
" This must be set to no, otherwise this breaks cabbrev working on <cr>
let g:bling_no_expr = 1

"Show the diff when editing a git commit.
Plug 'rhysd/committia.vim'

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" linting
"""""""""""""""""""""""""""""""""""""""""""""""""""""
"Async linting engine
let g:ale_completion_enabled = 1  " Rely on keypress to invoke completion
let g:ale_lint_on_text_changed = 0  " Run linting only when saving the file
Plug 'w0rp/ale'

inoremap <silent><expr> <Tab>
    \ pumvisible() ? "\<C-n>" : "\<TAB>"

inoremap <silent><expr> <S-Tab> 
    \ pumvisible() ? "\<C-p>" : "\<S-TAB>"

set completeopt=menu,menuone,preview,noselect,noinsert

let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

if !exists('g:ale_fixers')
    let g:ale_fixers = {
                \ 'python': ['isort']
                \ }
    let g:ale_fix_on_save=1
endif

if !exists('g:ale_linters')
    let g:ale_linters = {
                \ 'c': [],
                \ 'cpp': [],
                \ 'python': ['pyls', 'flake8', 'mypy', 'pycodestyle', 'pydocstyle' ]
                \ }
endif

if !exists('g:ale_python_pyls_config')
    let g:ale_python_pyls_config = {
                \     'pyls': {
                \         'configurationSources': ['flake8', 'pycodestyle'],
                \         'plugins': {'pydocstyle': {'enabled': v:true}}
                \     }
                \ }
endif

"Adhere to linux coding style guidelines
Plug 'vivien/vim-linux-coding-style'
let g:linuxsty_patterns = []

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim Plugins that add keyboard commands

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Wikidown provides a personal wiki implemented with markdown files.
Plug 'adamatom/wikidown'
let g:wikidown_debug = 0
let g:wikidown_default_maps = 1
let g:wikidown_wikis = {
  \ 'notes': {
  \     'path': '~/projects/notes_wiki',
  \     'path_html': '~/projects/notes_wiki/html',
  \     'index_file': 'index.md',
  \     'log_subdir': 'log',
  \     'ignore_html': '',
  \     'author': 'Adam',
  \     'css': ''},
  \ 'home': {
  \     'path': '~/projects/home_wiki',
  \     'path_html': '~/projects/home_wiki/html',
  \     'index_file': 'index.md',
  \     'log_subdir': 'log',
  \     'ignore_html': '',
  \     'author': 'Adam',
  \     'css': ''},
  \ 'adamatom': {
  \     'path': '~/projects/wiki',
  \     'path_html': '~/projects/wiki/html',
  \     'index_file': 'index.md',
  \     'log_subdir': 'log',
  \     'ignore_html': '',
  \     'author': 'Adam Labbe',
  \     'css': ''},
  \ 'gen6': {
  \     'path': '~/projects/idexx/acadia/gen6-presentation/',
  \     'path_html': '~/projects/idexx/acadia/gen6-presentation/html',
  \     'index_file': 'index.md',
  \     'log_subdir': 'log',
  \     'ignore_html': '',
  \     'author': 'Adam Labbe',
  \     'css': ''}
  \ }

"replace {motion} with a register. Faster than typing '"_c[motion]^r"'
Plug 'vim-scripts/ReplaceWithRegister'

"repeated v's expand cut the visually selected region
Plug 'terryma/vim-expand-region'

"nice motion plugin, relieves 'w' spam
Plug 'justinmk/vim-sneak'
let g:sneak#label = 1
let g:sneak#s_next = 1
map f <Plug>Sneak_f
map F <Plug>Sneak_F
map t <Plug>Sneak_t
map T <Plug>Sneak_T

"better file switching
Plug 'derekwyatt/vim-fswitch'
augroup mycppfiles
    au!
    au BufEnter *.h let b:fswitchlocs = 'reg:/include/src/,reg:/headers/cpp/,ifrel:|/include/|../src|,./'
    au BufEnter *.cpp let b:fswitchlocs = 'reg:/src/include/,reg:/cpp/headers/,ifrel:|/src/|../include|,./'
augroup END

"Force better vim usage by making hjkl less useful
Plug 'takac/vim-hardtime'
let g:hardtime_default_on = 0
let g:hardtime_ignore_buffer_patterns = ['\[BufExplorer\]']
let g:hardtime_ignore_quickfix = 1
let g:hardtime_maxcount = 2
let g:list_of_normal_keys = ['h', 'j', 'k', 'l', '<UP>', '<DOWN>', '<LEFT>', '<RIGHT>']
let g:list_of_visual_keys = ['<UP>', '<DOWN>', '<LEFT>', '<RIGHT>']
let g:list_of_insert_keys = ['<UP>', '<DOWN>', '<LEFT>', '<RIGHT>']
let g:list_of_disabled_keys = []

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Extra language support, such as syntax highlighting, repl interaction
"""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:cpp_class_scope_highlight = 1
Plug 'wlangstroth/vim-racket', {'for': ['scheme', 'racket']}
Plug 'tpope/vim-fireplace', {'for' : 'clojure' }

"automatically display markdown view when editing md files
Plug 'suan/vim-instant-markdown', {'for': 'markdown'}
let g:instant_markdown_autostart = 0

"Sort python includes with isort
Plug 'fisadev/vim-isort'
let g:vim_isort_python_version = 'python3'

"graphviz support
Plug 'wannesm/wmgraphviz.vim'

"Linux kernel/Buildroot Kconfig syntax
Plug 'chrisbra/vim-kconfig'

"Syntax, indent, ftplugin for a bunch of languages
Plug 'sheerun/vim-polyglot'

"F#
Plug 'vim-syntastic/syntastic', { 'for': 'fsharp' }

Plug 'fsharp/vim-fsharp', {
      \ 'for': 'fsharp',
      \ 'do':  'make fsautocomplete',
      \}

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" omni completers
"""""""""""""""""""""""""""""""""""""""""""""""""""""

"display function signature after autocompletion item is selected
Plug 'Shougo/echodoc.vim'
let g:echodoc#enable_at_startup=1

Plug 'ajh17/VimCompletesMe'
let g:vcm_tab_complete = 'user'

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" color schemes
"""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'NLKNguyen/papercolor-theme'
Plug 'chriskempson/base16-vim'
Plug 'connorholyday/vim-snazzy'
Plug 'dracula/vim'
Plug 'jacoborus/tender.vim'
Plug 'joshdick/onedark.vim'
Plug 'liuchengxu/space-vim-theme'
Plug 'marcopaganini/termschool-vim-theme'
Plug 'mhartington/oceanic-next'
Plug 'mkarmona/materialbox'
Plug 'morhetz/gruvbox'
Plug 'nightsense/carbonized'
Plug 'rakr/vim-one'
Plug 'ayu-theme/ayu-vim'


call plug#end()
