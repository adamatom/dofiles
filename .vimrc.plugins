scriptencoding utf-8
" run plugged
call plug#begin('~/.vim/plugged')

let g:ale_emit_conflict_warnings = 0
"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins that add new windows
"""""""""""""""""""""""""""""""""""""""""""""""""""""
"fancypants status line
Plug 'itchyny/lightline.vim'
let g:lightline = {
    \ 'colorscheme': 'OldHope',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'fugitive', 'filename', 'readonly' ] ],
    \   'right': [ [ 'lineinfo', 'ale' ],
    \              [ 'percent' ],
    \              [ 'fileformat', 'fileencoding', 'filetype' ] ]
    \ },
    \ 'component': {
    \   'readonly': "%{&readonly?'тнд':''}",
    \ },
    \ 'component_function': {
    \   'ale': 'LightLineAle',
    \   'fugitive': 'LightlineFugitive',
    \   'filename': 'LightlineFilename',
    \ },
    \ }

function! IsQFLLFocused()
    silent! exec 'redir @a | ls | redir END'
    if match(@a,'%a-  "\[Location List\]"') >= 0
        return 1
    elseif match(@a,'%a-  "\[Quickfix List\]"') >= 0
        return 2
    else
        return 0
    endif
endfunction

function! LightlineFugitive()
    if &filetype !~? 'vimfiler' && exists('*fugitive#head')
        return fugitive#head()
    endif
    return ''
endfunction

function! LightLineAle() abort
    let l:counts = ale#statusline#Count(bufnr(''))

    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors

    return l:counts.total == 0 ? 'OK' : printf(
    \   '%dW %dE',
    \   all_non_errors,
    \   all_errors
    \)
endfunction
function! LightlineFilename()
    let l:is_special_focused = IsQFLLFocused()
    if l:is_special_focused == 1
        return '[Local/Location List]'
    elseif l:is_special_focused == 2
        return '[Global/QuickFix]'
    endif

    let l:short_filename = expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
    let l:med_filename = expand('%:t') !=# '' ? fnamemodify(expand('%:p'), ':~:.') : '[No Name]'
    let l:full_filename = expand('%:t') !=# '' ? fnamemodify(expand('%:p'), ':~:.') : '[No Name]'

    let l:max_len = 120
    let l:full_len = len(l:full_filename)
    let l:med_len = len(l:med_filename)

    let l:use_short = l:full_len > l:max_len && l:med_len > l:max_len
    let l:use_med = l:full_len > l:max_len && l:med_len <= l:max_len

    return l:use_short ? l:short_filename : l:use_med ? l:med_filename : l:full_filename
endfunction

"spacemacs like window to show next key
Plug 'liuchengxu/vim-which-key', { 'on': ['WhichKey', 'WhichKey!', 'WhichKeyVisual'] }

"adds a window that shows all of the functions in the current file
Plug 'majutsushi/tagbar'

"visual undo tree. nice for when you need to go back to a branch
Plug 'sjl/gundo.vim'

"provides hg/git change status in the left gutter
Plug 'mhinz/vim-signify'

"vim front end for ack, with support for ag backend
Plug 'mileszs/ack.vim'
if executable('rg')
    let g:ackprg = 'rg --vimgrep --no-heading'
endif

"better buffer management
Plug 'jlanzarotta/bufexplorer'

"display marks
Plug 'kshenoy/vim-signature'

"Alternative to netrw, which is slow and buggy
Plug 'jeetsukumaran/vim-filebeagle'

"Git wrapper for doing git things on files in vim
Plug 'tpope/vim-fugitive'
command! Greview :Git! diff --staged

"Blink the hlsearch item we just jumped to
Plug 'ivyl/vim-bling'
" This must be set to no, otherwise this breaks cabbrev working on <cr>
let g:bling_no_expr = 1

"Show the diff when editing a git commit.
Plug 'rhysd/committia.vim'

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" linting
"""""""""""""""""""""""""""""""""""""""""""""""""""""
"Async linting engine
Plug 'w0rp/ale'
" enable flake8 checker because pyls refuses to support it. Flake8 has useful
" plugins that check more than the binaries pyls will use.
let g:ale_linters = {
            \ 'c': [],
            \ 'cpp': [],
            \ 'python': ['flake8']
\ }

"Adhere to linux coding style guidelines
Plug 'vivien/vim-linux-coding-style'
let g:linuxsty_patterns = []

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim Plugins that add keyboard commands

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Wikidown provides a personal wiki implemented with markdown files.
Plug 'adamatom/wikidown'
let g:wikidown_debug = 0
let g:wikidown_default_maps = 1
let g:wikidown_wikis = {
  \ 'notes': {
  \     'path': '~/projects/notes_wiki',
  \     'path_html': '~/projects/notes_wiki/html',
  \     'index_file': 'index.md',
  \     'log_subdir': 'log',
  \     'ignore_html': '',
  \     'author': 'Adam',
  \     'css': ''},
  \ 'home': {
  \     'path': '~/projects/home_wiki',
  \     'path_html': '~/projects/home_wiki/html',
  \     'index_file': 'index.md',
  \     'log_subdir': 'log',
  \     'ignore_html': '',
  \     'author': 'Adam',
  \     'css': ''},
  \ 'adamatom': {
  \     'path': '~/projects/wiki',
  \     'path_html': '~/projects/wiki/html',
  \     'index_file': 'index.md',
  \     'log_subdir': 'log',
  \     'ignore_html': '',
  \     'author': 'Adam Labbe',
  \     'css': ''} }


"smooth scroll on ctrl-u ctrl-d
Plug 'terryma/vim-smooth-scroll'
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 30, 4)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 30, 4)<CR>

"replace {motion} with a register. Faster than typing '"_c[motion]^r"'
Plug 'vim-scripts/ReplaceWithRegister'

"repeated v's expand cut the visually selected region
Plug 'terryma/vim-expand-region'

"nice motion plugin, relieves 'w' spam, lighter weight than easymotion
Plug 'justinmk/vim-sneak'
let g:sneak#label = 1

"better file switching
Plug 'derekwyatt/vim-fswitch'
augroup mycppfiles
    au!
    au BufEnter *.h let b:fswitchlocs = 'reg:/include/src/,reg:/headers/cpp/,ifrel:|/include/|../src|,./'
    au BufEnter *.cpp let b:fswitchlocs = 'reg:/src/include/,reg:/cpp/headers/,ifrel:|/src/|../include|,./'
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Extra language support, such as syntax highlighting, repl interaction
"""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:cpp_class_scope_highlight = 1
Plug 'wlangstroth/vim-racket', {'for': ['scheme', 'racket']}
Plug 'tpope/vim-fireplace', {'for' : 'clojure' }

"automatically display markdown view when editing md files
Plug 'suan/vim-instant-markdown', {'for': 'markdown'}
let g:instant_markdown_autostart = 0

"Sort python includes with isort
Plug 'fisadev/vim-isort'
let g:vim_isort_python_version = 'python3'

"graphviz support
Plug 'wannesm/wmgraphviz.vim'

"Linux kernel/Buildroot Kconfig syntax
Plug 'chrisbra/vim-kconfig'

"Syntax, indent, ftplugin for a bunch of languages
Plug 'sheerun/vim-polyglot'

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" omni completers
"""""""""""""""""""""""""""""""""""""""""""""""""""""

"display function signature after autocompletion item is selected
Plug 'Shougo/echodoc.vim'
let g:echodoc#enable_at_startup=1

Plug 'ajh17/VimCompletesMe'
let g:vcm_tab_complete = 'user'

set completeopt=menuone,longest,preview

"Enable language server support
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'

" enable signs
let g:lsp_signs_enabled = 1

" enable echo under cursor when in normal mode
let g:lsp_diagnostics_echo_cursor = 1

" Logging is helpful
let g:lsp_log_verbose = 0
let g:lsp_log_file = expand('/tmp/vim-lsp.log')

" for asyncomplete.vim log
let g:asyncomplete_log_file = expand('/tmp/asyncomplete.log')
let g:asyncompletelsp_log_file = expand('/tmp/asyncomplete.log')


" Helper macro for declaring language servers.
"   [string] exe: the executable name to check for
"   [string] filetypes: filetypes to associate to this language server
"   [string] conf_map: the configuration map to pass to lsp#register_server
function! LanguageServer(exe, filetypes, conf_map)
    execute 'augroup lsp_' . a:exe
    execute   'autocmd!'
    execute   'autocmd User lsp_setup call lsp#register_server(' . a:conf_map . ')'
    execute   'autocmd FileType ' . a:filetypes . ' setlocal completefunc=lsp#complete'
    execute   'autocmd FileType ' . a:filetypes . ' let b:vcm_tab_complete = "user"'
    execute   'autocmd Filetype ' . a:filetypes . ' nnoremap <buffer><silent> <c-]> :LspDefinition<CR>'
    execute   'autocmd Filetype ' . a:filetypes . ' nnoremap <buffer><silent> K :LspHover<CR>'
    execute   'autocmd BufWritePost ' . a:filetypes . ' :LspDocumentDiagnostics<CR>'
    execute 'augroup end'
endfunction

" yay -S python-jedi python-language-server python-rope python-pyflakes python-mccabe
" yay -S python-pycodestyle python-pydocstyle yapf
" Also recommend disabling ALE for python:
" let g:ale_linters = {'c': [], 'cpp': [], 'python': []}
" \ 'cmd': {server_info->['pyls', '-vv', '--log-file', '/tmp/pyls.log']},
call LanguageServer('pyls', 'python',
            \ "{
            \   'name': 'pyls',
            \   'cmd': {server_info->['python', '-m', 'pyls', '-vv', '--log-file', '/tmp/pyls.log']},
            \   'root_uri': { server_info->lsp#utils#path_to_uri(
            \     lsp#utils#find_nearest_parent_directory(
            \       lsp#utils#get_buffer_path(), '.git/..'))},
            \   'whitelist': ['python'],
            \   'workspace_config': {
            \     'pyls': {
            \         'configurationSources': ['flake8', 'pycodestyle'],
            \         'plugins': {'pydocstyle': {'enabled': v:true}}
            \     }
            \   }
            \ }")

" yay -S clang-tools-extra
call LanguageServer('clangd', 'c,cpp,objc,objcpp',
            \ "{
            \ 'name': 'clangd',
            \ 'cmd': {server_info->['clangd']},
            \ 'root_uri': {server_info->lsp#utils#path_to_uri(
            \   lsp#utils#find_nearest_parent_file_directory(
            \     lsp#utils#get_buffer_path(), 'compile_commands.json'))},
            \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp', 'cc'],
            \ }")

" Unfortunately, not an open source project, download from:
" https://www.vhdltool.com/download
call LanguageServer('vhdl-tool', 'vhdl',
            \ "{
            \ 'name': 'vhdl-tool',
            \ 'cmd': {server_info->['vhdl-tool', 'lsp']},
            \ 'whitelist': ['vhdl'],
            \ 'root_uri':{server_info->lsp#utils#path_to_uri(
            \   lsp#utils#find_nearest_parent_file_directory(
            \     lsp#utils#get_buffer_path(), 'vhdltool-config.yaml'))},
            \ }")

" Need to install rustup first:
"   yay -S rustup
" Then install nightly toolchain, then components
"   rustup install nightly
"   rustup component add rls-preview rust-analysis rust-src
"   rustup default nightly
"   cargo install racer
call LanguageServer('rls', 'rust',
            \ "{
            \ 'name': 'rls',
            \ 'cmd': {server_info->['rustup', 'run', 'nightly', 'rls']},
            \ 'whitelist': ['rust'],
            \ }")

" yay -S go-langserver-git
call LanguageServer('go-langserver', 'go',
            \ "{
            \ 'name': 'go-langserver',
            \ 'cmd': {server_info->['go-langserver', '-mode', 'stdio']},
            \ 'whitelist': ['go'],
            \ }")

" yay -S typescript-language-server-bin
call LanguageServer('typescript-language-server', 'javascript,typescript',
            \ "{
            \ 'name': 'typescript-language-server',
            \ 'cmd': { server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
            \ 'root_uri': { server_info->lsp#utils#path_to_uri(
            \   lsp#utils#find_nearest_parent_directory(
            \     lsp#utils#get_buffer_path(), '.git/..'))},
            \ 'whitelist': ['typescript', 'javascript', 'javascript.jsx']
            \ }")

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" color schemes
"""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'NLKNguyen/papercolor-theme'
Plug 'chriskempson/base16-vim'
Plug 'connorholyday/vim-snazzy'
Plug 'dracula/vim'
Plug 'jacoborus/tender.vim'
Plug 'joshdick/onedark.vim'
Plug 'liuchengxu/space-vim-theme'
Plug 'marcopaganini/termschool-vim-theme'
Plug 'mhartington/oceanic-next'
Plug 'mkarmona/materialbox'
Plug 'morhetz/gruvbox'
Plug 'nightsense/carbonized'
Plug 'rakr/vim-one'


call plug#end()
