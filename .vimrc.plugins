scriptencoding utf-8
" run plugged
call plug#begin('~/.vim/plugged')

let g:ale_emit_conflict_warnings = 0
"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins that add new windows
"""""""""""""""""""""""""""""""""""""""""""""""""""""
"fancypants status line
Plug 'itchyny/lightline.vim'
let g:lightline = {
    \ 'colorscheme': 'OldHope',
    \ 'component': {
    \   'readonly': "%{&readonly?'тнд':''}",
    \ },
    \ 'component_function': {
    \   'filename': 'LightlineFilename',
    \ },
    \ }

function! IsQFLLFocused()
    silent! exec 'redir @a | ls | redir END'
    if match(@a,'%a-  "\[Location List\]"') >= 0
        return 1
    elseif match(@a,'%a-  "\[Quickfix List\]"') >= 0
        return 2
    else
        return 0
    endif
endfunction

function! LightlineFilename()
    let l:is_special_focused = IsQFLLFocused()
    if l:is_special_focused == 1
        return '[Local/Location List]'
    elseif l:is_special_focused == 2
        return '[Global/QuickFix]'
    endif

    let l:short_filename = expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
    let l:med_filename = expand('%:t') !=# '' ? fnamemodify(expand('%:p'), ':~:.') : '[No Name]'
    let l:full_filename = expand('%:t') !=# '' ? fnamemodify(expand('%:p'), ':~') : '[No Name]'

    let l:max_len = 120
    let l:full_len = len(l:full_filename)
    let l:med_len = len(l:med_filename)

    let l:use_short = l:full_len > l:max_len && l:med_len > l:max_len
    let l:use_med = l:full_len > l:max_len && l:med_len <= l:max_len

    return l:use_short ? l:short_filename : l:use_med ? l:med_filename : l:full_filename
endfunction

"adds a window that shows all of the functions in the current file
Plug 'majutsushi/tagbar'

"visual undo tree. nice for when you need to go back to a branch
Plug 'sjl/gundo.vim'

"provides hg/git change status in the left gutter
Plug 'mhinz/vim-signify'

"vim front end for ack, with support for ag backend
Plug 'mileszs/ack.vim'
if executable('ag')
    let g:ackprg = 'ag --vimgrep'
endif

"better buffer management
Plug 'jlanzarotta/bufexplorer'

"display marks
Plug 'kshenoy/vim-signature'

"Alternative to netrw, which is slow and buggy
Plug 'jeetsukumaran/vim-filebeagle'

"Git wrapper for doing git things on files in vim
Plug 'tpope/vim-fugitive'
command! Greview :Git! diff --staged

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" linting
"""""""""""""""""""""""""""""""""""""""""""""""""""""
"Async linting engine
Plug 'w0rp/ale', {'for': ['vim', 'rust', 'clojure', 'zsh', 'bash', 'elixir']}
let g:ale_linters = {'c': [], 'cpp': [], 'python': []}

"Adhere to linux coding style guidelines
Plug 'vivien/vim-linux-coding-style'
let g:linuxsty_patterns = []

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim Plugins that add keyboard commands
"""""""""""""""""""""""""""""""""""""""""""""""""""""
"replace {motion} with a register. Faster than typing '"_c[motion]^r"'
Plug 'vim-scripts/ReplaceWithRegister'

"repeated v's expand cut the visually selected region
Plug 'terryma/vim-expand-region'
vmap v <Plug>(expand_region_expand)
vmap <S-v> <Plug>(expand_region_shrink)

"nice motion plugin, relieves 'w' spam, lighter weight than easymotion
Plug 'justinmk/vim-sneak'
let g:sneak#label = 1

"better file switching
Plug 'derekwyatt/vim-fswitch'
augroup mycppfiles
    au!
    au BufEnter *.h let b:fswitchlocs = 'reg:/include/src/,reg:/headers/cpp/,ifrel:|/include/|../src|,./'
    au BufEnter *.cpp let b:fswitchlocs = 'reg:/src/include/,reg:/cpp/headers/,ifrel:|/src/|../include|,./'
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Extra language support, such as syntax highlighting, repl interaction
"""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'NLKNguyen/c-syntax.vim', {'for': ['c', 'cpp']}
Plug 'octol/vim-cpp-enhanced-highlight', {'for': 'cpp'}
let g:cpp_class_scope_highlight = 1
Plug 'hdima/python-syntax', {'for': 'python'}
let g:python_highlight_all = 1
Plug 'fatih/vim-go', {'for': 'go' }
Plug 'wlangstroth/vim-racket', {'for': ['scheme', 'racket']}
Plug 'tpope/vim-fireplace', {'for' : 'clojure' }
Plug 'aklt/plantuml-syntax'
Plug 'rust-lang/rust.vim', {'for': 'rust'}
let g:rustfmt_autosave = 1
Plug 'elixir-editors/vim-elixir', {'for': 'elixir'}

"automatically display markdown view when editing md files
Plug 'suan/vim-instant-markdown', {'for': 'markdown'}
let g:instant_markdown_autostart = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" omni completers
"""""""""""""""""""""""""""""""""""""""""""""""""""""

"Very simple completer that basically runs through vim's default completion engine
Plug 'ajh17/VimCompletesMe'
set completeopt+=menuone,longest,preview
"Make up/down/cr map to the (oddly) more useful ctrl-n, ctrl-p, ctrl-y, ctrl-e
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"

" Autocompleters for non-LSP languages
Plug 'slashmili/alchemist.vim', {'for' : 'elixir'}
Plug 'racer-rust/vim-racer', {'for' : 'rust'}

Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'

let g:lsp_signs_enabled = 1         " enable signs
let g:lsp_diagnostics_echo_cursor = 1 " enable echo under cursor when in normal mode

if executable('pyls')
    " yay -S python-jedi python-language-server python-rope python-pyflakes python-mccabe
    " yay -S python-pycodestyle python-pydocstyle yapf
    " Also recommend disabling ALE for python:
    "     let g:ale_linters = {'c': [], 'cpp': [], 'python': []}
    augroup lsp_pyls
        autocmd!
        autocmd User lsp_setup call lsp#register_server({
            \ 'name': 'pyls',
            \ 'cmd': {server_info->['pyls']},
            \ 'whitelist': ['python'],
            \ 'workspace_config': {'pyls': {'plugins': {'pydocstyle': {'enabled': v:true}}}}
            \ })
        autocmd Filetype python setlocal completefunc=lsp#complete
        autocmd FileType python let b:vcm_tab_complete = 'user'
        autocmd Filetype python nnoremap <buffer><silent> <c-]> :LspDefinition<CR>
        autocmd Filetype python nnoremap <buffer><silent> K :LspHover<CR>
        autocmd BufWritePost python :LspDocumentDiagnostics<CR>
    augroup end
endif

if executable('cquery')
    " yay -S cquery bear-git
    augroup lsp_cquery
        autocmd!
        autocmd User lsp_setup call lsp#register_server({
                    \ 'name': 'cquery',
                    \ 'cmd': {server_info->['cquery']},
                    \ 'root_uri': {server_info->lsp#utils#path_to_uri(
                    \   lsp#utils#find_nearest_parent_file_directory(
                    \     lsp#utils#get_buffer_path(), 'compile_commands.json'))},
                    \ 'initialization_options': { 'cacheDirectory': '/tmp/cquery/cache' },
                    \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp', 'cc'],
                    \ })
        autocmd FileType c,cpp,objc,objcpp setlocal completefunc=lsp#complete
        autocmd FileType c,cpp,objc,objcpp let b:vcm_tab_complete = 'user'
        autocmd Filetype c,cpp,objc,objcpp nnoremap <buffer><silent> <c-]> :LspDefinition<CR>
        autocmd Filetype c,cpp,objc,objcpp nnoremap <buffer><silent> K :LspHover<CR>
        autocmd BufWritePost c,cpp,objc,objcpp :LspDocumentDiagnostics<CR>
    augroup end
endif

if executable('vhdl-tool')
    " Unfortunately, not an open source project, download from:
    " https://www.vhdltool.com/download
    augroup lsp_vhdl
        autocmd!
        autocmd User lsp_setup call lsp#register_server({
            \ 'name': 'vhdl-tool',
            \ 'cmd': {server_info->['vhdl-tool', 'lsp']},
            \ 'whitelist': ['vhdl'],
            \ 'root_uri':{server_info->lsp#utils#path_to_uri(
            \   lsp#utils#find_nearest_parent_file_directory(
            \     lsp#utils#get_buffer_path(), 'vhdltool-config.yaml'))},
            \ })
        autocmd FileType vhdl setlocal completefunc=lsp#complete
        autocmd FileType vhdl let b:vcm_tab_complete = 'user'
        autocmd Filetype vhdl nnoremap <buffer><silent> <c-]> :LspDefinition<CR>
        autocmd Filetype vhdl nnoremap <buffer><silent> K :LspHover<CR>
        autocmd BufWritePost vhdl :LspDocumentDiagnostics<CR>
    augroup end
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""
" color schemes
"""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'adamatom/papercolor-theme'
Plug 'chriskempson/base16-vim'

call plug#end()
